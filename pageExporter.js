/* global getMessage */

var PageExporter = function () {

  var _lines = [];
  var _numEntries = 0;
  var _uidPrefix = 'UID:Chrome Badi Calendar Extension//';
  var _nowCalDate = '';

  var prepareInputs = function () {
    var template = '<li class="{c}"><label><input type="checkbox" value="{val}" /><span data-msg="exportOption_{val}"></span></label></li>';
    var items = [
      { val: 'Hd_Sun', c: '' },
      { val: 'Hd_AllDay', c: '' },
      { val: 'Hd_Start', c: '' },
      { val: 'Feast_Sun', c: 'group' },
      { val: 'Feast_AllDay', c: '' },
      { val: 'Fast_Sun2', c: 'group' },
      { val: 'Fast_Sun', c: '' },
      { val: 'Date_AllDay', c: 'group' },
      { val: 'Date_Sun', c: '' }
    ];

    $('.exportOptionList').html(template.filledWithEach(items));

    localizeHtml('.exportOptionList', function (value) {
      value = value.replace(/\(/g, '<span class=comment>(');
      value = value.replace(/\)/g, ')</span>');
      return value;
    });

    setByYear();
  }

  var setByYear = function (highlight) {
    var select = $('#exporterDateRange');
    select.find('option').each(function (i, el) {
      var option = $(el);
      var key = option.attr('id');
      var parts = key.split('_');
      var type = parts[1];
      var offset = +parts[2];

      var year = offset + (type === 'Greg' ? _di.currentYear : _di.bYear);
      option.val(type + year);
      option.text(getMessage('Export' + type + 'Year' + offset, year));
    });
    if (highlight) {
      select.effect("highlight", 1000);
    }
  }

  var calFormat = function (date) {
    return date.toJSON().replace(/[\-\:]/g, '').split('.')[0] + 'Z';
  }

  var makeEntries = function (amount) {
    _lines = [];
    _nowCalDate = calFormat(new Date());

    addLine('BEGIN:VCALENDAR');
    addLine('VERSION:2.0');
    addLine('CALSCALE:GREGORIAN');
    addLine('METHOD:PUBLISH');
    addLine('X-WR-CALNAME:Badí - Calgary');
    addLine('X-WR-TIMEZONE:America/Denver');
    addLine('X-WR-CALDESC:The days of the Baha\'i Calendar for Calgary Alberta');

    addEntries(amount);

    addLine('END:VCALENDAR');
  }

  var addEntries = function (amount) {
    var range = $('#exporterDateRange').val();
    var type = range.substr(0, 4);
    var year = +range.substr(4);
    var date = null;
    var nextYearStarts = null;
    var maxEntries = 0;
    if (amount == 'some') {
      maxEntries = 5;
    }

    log(type, year);

    switch (type) {
      case 'Badi':
        date = new Date(holyDays.getGDate(year, 1, 1).getTime());
        date.setHours(12, 0, 0, 0);
        nextYearStarts = new Date(holyDays.getGDate(year + 1, 1, 1).getTime())
        nextYearStarts.setHours(12, 0, 0, 0);
        break;
      case 'Greg':
        date = new Date(year, 0, 1);
        date.setHours(12, 0, 0, 0);
        nextYearStarts = new Date(year + 1, 0, 1);
        nextYearStarts.setHours(12, 0, 0, 0);
        break;
      default:
        log("unexpected: {0} {1}".filledWith(type, year));
        break;
    }

    var wantedEvents = $('.exportOptionList input:checked').map(function (i, el) { return el.value; }).get();
    log(wantedEvents);


    while (date < nextYearStarts) {
      log(calFormat(date));
      var di = getDateInfo(date);

      for (var i = 0; i < wantedEvents.length; i++) {
        var eventType = wantedEvents[i];
        var parts = eventType.split('_');
        var type = parts[0];
        var variation = parts[1];
        switch (type) {
          case 'Date':
            addEntryDate(type, di, variation);
            break;

        }
      }

      // entry
      if (maxEntries && _numEntries > maxEntries) {
        break;
      }

      date.setDate(date.getDate() + 1);
    }
  }


  var addEntry = function () {
    _numEntries++;


    /* BADI DAY
    *
BEGIN:VEVENT
DTSTART;VALUE=DATE:20140321
DTSTAMP:20160118T064745Z
UID:nvevsld1q4sbso76qsfbj9a7f4@google.com
LAST-MODIFIED:20141224T090214Z
CREATED:20141224T090214Z
DESCRIPTION:1 Bahá 171 ⇨7:51 pm\n\nTimes customized for Northeast Calgary\,
  Calgary\, AB\, Canada\nGenerated by "Badi Calendar Tools" on 13 Masá'il 17
 1
LOCATION:
SEQUENCE:0
STATUS:CONFIRMED
SUMMARY:1 Bahá 171 ⇨7:51 pm
TRANSP:TRANSPARENT
END:VEVENT

     * 
     * 
     * 
     */




  }

  var addEntryDate = function (type, di, variation) {
    addLine('BEGIN:VEVENT');

    switch (variation) {
      case 'AllDay':
        addLine('DTSTART;VALUE=DATE:' + di.currentDateString.replace(/\-/g,''));
        addLine('SUMMARY:{bDay} {bMonthNameAr} {bYear} ⇨{endingSunsetDesc}'.filledWith(di));
        break;
      case 'Sun':
        addLine('DTSTART:' + calFormat(di.frag1SunTimes.sunset));
        addLine('DTEND:' + calFormat(di.frag2SunTimes.sunset));
        addLine('SUMMARY:{bDay} {bMonthAr} {bYear}'.filledWith(di));
        break;
      default:
        log('unexpected date variation: ' + variation);
        break;
    }


    addLine('DESCRIPTION:The is a test invite for you to see how this thing actually works. test invite for you to see how this thing actually works.');


    addLine(_uidPrefix + '{0}//{1}-{2}'.filledWith(di.stampDay, type, variation));
    addEndOfEntry()
  }

  var addEndOfEntry = function () {
    addLine('TRANSP:TRANSPARENT');
    addLine('CLASS: PUBLIC')
    addLine('DTSTAMP:' + _nowCalDate);
    addLine('LAST-MODIFIED:' + _nowCalDate);
    addLine('LOCATION:' + localStorage.locationName);
    addLine('END:VEVENT');

    _numEntries++;
  }

  var addLine = function (line) {
    var maxLength = 65; // actually 75, but need to handle extended characters, etc
    if (line.length < maxLength) {
      _lines.push(line);
      return;
    }
    _lines.push(line.substr(0, maxLength));
    addLine(' ' + line.substr(maxLength))
  }


  var sendTo = function (target) {
    switch (target) {
      case 'test':
        var html = [];
        for (var i = 0; i < _lines.length; i++) {
          var line = _lines[i];
          if (line == 'BEGIN:VEVENT') {
            html.push('<hr>');
          }
          html.push(_lines[i] + '<br>');
        }
        $('#exporterTest').html(html.join(''))
        break;
      case 'google':
        break;
      case 'file':
        break;
    }
  }


  var attachHandlers = function () {
    $('#pageExporter').on('change', 'input[type=checkbox]', function (ev) {
      var cb = $(ev.target);
      setStorage('exporter_' + cb.val(), cb.is(':checked'));
    });

    $('#btnExportSome').click(function () {
      makeEntries('some');
      sendTo('file');
    });

    $('#btnExportAll').click(function () {
      makeEntries('all');
      sendTo('file');
    });

    $('#btnExportGoogleSome').click(function () {
      makeEntries('some');
      sendTo('google');
    });
    $('#btnExportTestSome').click(function () {
      makeEntries('some');
      sendTo('test');
    });
    $('#btnExportTestAll').click(function () {
      makeEntries('all');
      sendTo('test');
    });
  }

  var recallSettings = function () {
    $('#pageExporter input[type=checkbox]').each(function (i, el) {
      var cb = $(el);
      cb.prop('checked', getStorage('exporter_' + cb.val(), false));
    });
  }

  function startup() {
    prepareInputs();
    recallSettings();
    attachHandlers();
  }

  startup();

  return {
    updateYear: setByYear
  }
}
